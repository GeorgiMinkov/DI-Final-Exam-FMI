-- Задача 3. (10 т.) Задачата да се реши на езика Scheme или Haskell. В началото на вашето
-- решение посочете кой език сте избрали.
-- Нека е даден списък L, който може да съдържа елементи от произволен тип. Напишете функция
-- permutations, която получава такъв списък и връща списък с всички пермутации (възможни
-- пренареждания) на неговите елементи. Резултатът да се върне като списък от списъци, в който
-- всеки подсписък представя една пермутация на елементите на L.

-- Пример (Haskell):
-- permutations [1,2,3] → [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]

-- Solution:
permutations [] = [[]]
permutations l = [a:x | a <- l, x <- (permutations $ filter (\x -> x /= a) l)]

main = do

    print (permutations [1,2,3]) -- [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1] ]
