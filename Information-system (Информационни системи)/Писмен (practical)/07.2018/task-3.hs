-- Задача 3. Задачата да се реши на един от езиците Scheme или Haskell. По-долу оградете името
-- на езика, който сте избрали за вашето решение.

-- Дадени са непразен списък от едноместни числови функции fl и непразен списък от числа xl.
-- Казваме, че числото x е “неподвижна точка” на функцията f, ако f(x) = x. Да се попълнят по
-- подходящ начин празните полета по-долу така, че за всички функции от fl, които имат
-- неподвижна точка сред числата в xl, функцията sumMinFix да намира сумата на най-малките им
-- такива неподвижни точки. Ако никоя функция от fl няма неподвижна точка сред числата в xl,
-- функцията sumMinFix да връща числото 0. Помощната функция addDefault служи да осигури,
-- че ако подаденият ѝ списък е празен, то в него се добавя една стойност по подразбиране.
-- Упътване: можете да използвате наготово функциите apply, filter, foldr, map, min, minimum,
-- както и всички стандартни функции в R5RS за Scheme и Prelude за Haskell.

-- Solution:
addDefault :: a -> [a] -> [a]
addDefault val [] = [val]
addDefault val l = l

sumMinFix:: [(Float -> Float)] -> [Float] -> Float
sumMinFix fl xl = sum (map (\f -> minimum (addDefault 0 [ x | x <- xl, f x == x ])) fl)


main = do
    print (sumMinFix [ (1/), exp, \x -> 2*x - 3 ] [-2, -1, 1, 3])
